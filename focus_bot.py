from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
)
import asyncio
import os
import logging

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

TOKEN = os.getenv("BOT_TOKEN") or "7593980406:AAEi98C8OflMtyoobUpSFGIpTpbX4A2w_EE"
user_sessions = {}

# üì≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu():
    keyboard = [
        [InlineKeyboardButton("üéØ –ù–∞—á–∞—Ç—å —Ñ–æ–∫—É—Å", callback_data="choose_focus")],
        [InlineKeyboardButton("‚òï –ü–µ—Ä–µ—Ä—ã–≤", callback_data="break")],
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
    ]
    return InlineKeyboardMarkup(keyboard)

# ‚è± –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
def get_focus_duration_menu():
    keyboard = [
        [
            InlineKeyboardButton("25 –º–∏–Ω", callback_data="focus_25"),
            InlineKeyboardButton("40 –º–∏–Ω", callback_data="focus_40"),
            InlineKeyboardButton("1 –º–∏–Ω", callback_data="focus_1")
        ],
        [InlineKeyboardButton("‚Ü© –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    return InlineKeyboardMarkup(keyboard)

# üöÄ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø FocusTimer Bot.\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=get_main_menu()
    )

# üéõ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == "choose_focus":
        await query.edit_message_text(
            "‚è± –í—ã–±–µ—Ä–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏–∏:",
            reply_markup=get_focus_duration_menu()
        )

    elif query.data.startswith("focus_"):
        minutes = int(query.data.split("_")[1])
        user_sessions[user_id] = user_sessions.get(user_id, 0) + 1
        await query.edit_message_text(
            f"üîí –§–æ–∫—É—Å-—Å–µ—Å—Å–∏—è #{user_sessions[user_id]} –Ω–∞—á–∞–ª–∞—Å—å!\n"
            f"‚è± –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {minutes} –º–∏–Ω—É—Ç.\n"
            "–ù–µ –æ—Ç–≤–ª–µ–∫–∞–π—Å—è ‚Äî —è –Ω–∞–ø–æ–º–Ω—é, –∫–æ–≥–¥–∞ –≤—Ä–µ–º—è –≤—ã–π–¥–µ—Ç!"
        )
        await asyncio.sleep(minutes * 60)
        await query.message.reply_text("‚úÖ –°–µ—Å—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –°–¥–µ–ª–∞–π –ø–µ—Ä–µ—Ä—ã–≤.", reply_markup=get_main_menu())

    elif query.data == "break":
        await query.edit_message_text("‚òï –ü–µ—Ä–µ—Ä—ã–≤ –Ω–∞—á–∞–ª—Å—è! 5 –º–∏–Ω—É—Ç –æ—Ç–¥—ã—Ö–∞.")
        await asyncio.sleep(300)
        await query.message.reply_text("üîÅ –ü–µ—Ä–µ—Ä—ã–≤ –æ–∫–æ–Ω—á–µ–Ω! –ì–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏?", reply_markup=get_main_menu())

    elif query.data == "stats":
        count = user_sessions.get(user_id, 0)
        await query.edit_message_text(f"üìà –¢—ã –∑–∞–≤–µ—Ä—à–∏–ª {count} —Ñ–æ–∫—É—Å-—Å–µ—Å—Å–∏–π.", reply_markup=get_main_menu())

    elif query.data == "back_to_main":
        await query.edit_message_text("üì≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=get_main_menu())

# üß† –ó–∞–ø—É—Å–∫
app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CallbackQueryHandler(handle_button))

print("üñ•Ô∏è –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –≤—ã–±–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–µ–Ω. –ë–æ—Ç –∂–¥—ë—Ç –∫–æ–º–∞–Ω–¥—ã...")
app.run_polling(allowed_updates=Update.ALL_TYPES)
